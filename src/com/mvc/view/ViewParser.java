package com.mvc.view;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.ModelAndView;

import com.mvc.controller.VulnerabilityFinder;
import com.mvc.model.GitApiFetch;
import com.mvc.model.Item;

@Component
public class ViewParser {

	@Autowired
	VulnerabilityFinder vulnerabilityFinder;
	
	ModelAndView modelAndView;
	Map<String,Object> allObjectsMap;
	List<Item> gitResponseList;
	
	public ViewParser() {	    
		modelAndView = new ModelAndView();
	}
	
	
	public ModelAndView parseGitResponse(ResponseEntity<GitApiFetch> gitApiFetch) {
		
		System.out.println("Getting ready to parse.......");
		
		int totalResponse = gitApiFetch.getBody().getItems().size();
				
		// every time create new instance for list and map
		createNewInstance();
		
		parseInList(totalResponse,gitApiFetch);
		
		// Mapping response with list
		allObjectsMap.put("Response", gitResponseList);
		
		modelAndView.addAllObjects(allObjectsMap);
		
		// assigning view file (result.jsp)
		modelAndView.setViewName("result");
		
		System.out.println("Parsed Everything........");
		
		return modelAndView;
		
	}
	
	private void parseInList(int totalResponse, ResponseEntity<GitApiFetch> gitApiFetch) {
		// parsing all response GIT items in view
			for(int response=0; response < totalResponse;response++) {
				Item currentResponse = gitApiFetch
						.getBody()
						.getItems()
						.get(response);
					
				// check whether the result contains exploit or not
				if(vulnerabilityFinder.isExploitInReadme(currentResponse.getFullName()))
					gitResponseList.add(currentResponse);
					
			}
		
	}


	private void createNewInstance() {
		allObjectsMap = new HashMap<String,Object>();
		gitResponseList = new ArrayList<>();
	}
	
}
