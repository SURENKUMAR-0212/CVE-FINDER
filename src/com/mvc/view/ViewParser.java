package com.mvc.view;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.ModelAndView;

import com.mvc.model.GitApiFetch;
import com.mvc.model.Item;
import com.mvc.model.BranchPojo;
import com.services.VulnerabilityFinder;

@Component
public class ViewParser {

	@Autowired
	VulnerabilityFinder vulnerabilityFinder;
	
	ResponseEntity<BranchPojo> branch;

	ModelAndView modelAndView;
	Map<String, Object> allObjectsMap;
	ArrayList<Item> gitResponseList;
//	List<String> branchList; 
	RestTemplate restTemplate;
	public ArrayList<Item> list;

	public ViewParser() {
		modelAndView = new ModelAndView();
		restTemplate = new RestTemplate();
		list = new ArrayList<>();
	}

	public ModelAndView parseGitResponse(ResponseEntity<GitApiFetch> gitApiFetch) {

		List<Item> itemResponse = gitApiFetch.getBody().getItems();

		// every time create new instance for list and map
		createNewInstance();

		parseInList(itemResponse, gitApiFetch);
		
		// Mapping response with list
		allObjectsMap.put("Response", gitResponseList);

		modelAndView.addAllObjects(allObjectsMap);

		// assigning view file (result.jsp)
		modelAndView.setViewName("result");
		
		list = gitResponseList;
		
		return modelAndView;

	}
	
	public ArrayList<Item> gitList(){
		return list;
	}

	private void parseInList(List<Item> itemResponse, ResponseEntity<GitApiFetch> gitApiFetch) {
		// parsing all response GIT items in view
		for (Item currentResponse : itemResponse) {
//			branchList = new ArrayList<>();
//			getAllbranches(currentResponse);
			
			if (vulnerabilityFinder.isExploitInReadme(
					currentResponse.getFullName(),
					currentResponse.getDefaultBranch()))
				currentResponse.setReadMeURL(vulnerabilityFinder.url);
				gitResponseList.add(currentResponse);
		}

	}
	
//	private void getAllbranches(Item item) {
//		System.out.println(item.getBranchesUrl().replace("{/branch}", ""));
//		System.out.println(restTemplate.getForEntity(item.getBranchesUrl().replace("{/branche}", ""),
//				BranchPojo.class));
//		System.out.println(branch.getBody());
//	}

	private void createNewInstance() {
		allObjectsMap = new HashMap<String, Object>();
		gitResponseList = new ArrayList<>();
	}

}