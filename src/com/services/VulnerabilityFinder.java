package com.services;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.mvc.model.API;

@Component
public class VulnerabilityFinder {

	private final int HTTP_STATUS_OK = 200;

	URL url;
	Scanner scan;
	HttpURLConnection connection;
	@Autowired
	API api;

	public boolean isExploitInReadme(String RepoName){

		boolean flag = false;
		
		try {
			
			url = new URL(api.READ_ME_FILE.replace("${full_name}", RepoName));
			connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("GET");
			System.out.println(api.READ_ME_FILE.replace("${full_name}", RepoName));
			if (isReadMepresent(connection))
			{
				System.out.println("Readme is present "+ RepoName);
				Pattern pattern = Pattern.compile("(exploit|vulnerability)", Pattern.CASE_INSENSITIVE);
				scan = new Scanner(url.openStream());
				while (scan.hasNext()) 
				{
					Matcher matcher = pattern.matcher(scan.nextLine());
					
					if (matcher.find())
					{
						System.out.println("\n----------------------");
						System.out.println("found match in Repo : "+ RepoName);
						System.out.println("------------------------\n");

						flag = true;
						break;
					}
				}

			}

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if(scan != null) scan.close();
		}
		
		return flag;
	}
	
	private boolean isReadMepresent(HttpURLConnection connection) throws IOException {
		
		return connection.getResponseCode() == HTTP_STATUS_OK;
		
	}

}
